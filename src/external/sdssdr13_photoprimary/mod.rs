use crate::{column::Column, schema::Schema};

pub struct Sdssdr13Photoprimary;

impl Schema for Sdssdr13Photoprimary {
    fn string(&self) -> String {
        "sdssdr13_photoprimary".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display, strum::EnumIter)]
pub enum Col {
    objid,
    skyversion,
    run,
    rerun,
    camcol,
    field,
    obj,
    mode,
    nchild,
    #[strum(serialize = "type")]
    r#type,
    clean,
    probpsf,
    insidemask,
    flags,
    rowc,
    rowcerr,
    colc,
    colcerr,
    rowv,
    rowverr,
    colv,
    colverr,
    rowc_u,
    rowc_g,
    rowc_r,
    rowc_i,
    rowc_z,
    rowcerr_u,
    rowcerr_g,
    rowcerr_r,
    rowcerr_i,
    rowcerr_z,
    colc_u,
    colc_g,
    colc_r,
    colc_i,
    colc_z,
    colcerr_u,
    colcerr_g,
    colcerr_r,
    colcerr_i,
    colcerr_z,
    sky_u,
    sky_g,
    sky_r,
    sky_i,
    sky_z,
    skyivar_u,
    skyivar_g,
    skyivar_r,
    skyivar_i,
    skyivar_z,
    psfmag_u,
    psfmag_g,
    psfmag_r,
    psfmag_i,
    psfmag_z,
    psfmagerr_u,
    psfmagerr_g,
    psfmagerr_r,
    psfmagerr_i,
    psfmagerr_z,
    fibermag_u,
    fibermag_g,
    fibermag_r,
    fibermag_i,
    fibermag_z,
    fibermagerr_u,
    fibermagerr_g,
    fibermagerr_r,
    fibermagerr_i,
    fibermagerr_z,
    fiber2mag_u,
    fiber2mag_g,
    fiber2mag_r,
    fiber2mag_i,
    fiber2mag_z,
    fiber2magerr_u,
    fiber2magerr_g,
    fiber2magerr_r,
    fiber2magerr_i,
    fiber2magerr_z,
    petromag_u,
    petromag_g,
    petromag_r,
    petromag_i,
    petromag_z,
    petromagerr_u,
    petromagerr_g,
    petromagerr_r,
    petromagerr_i,
    petromagerr_z,
    psfflux_u,
    psfflux_g,
    psfflux_r,
    psfflux_i,
    psfflux_z,
    psffluxivar_u,
    psffluxivar_g,
    psffluxivar_r,
    psffluxivar_i,
    psffluxivar_z,
    fiberflux_u,
    fiberflux_g,
    fiberflux_r,
    fiberflux_i,
    fiberflux_z,
    fiberfluxivar_u,
    fiberfluxivar_g,
    fiberfluxivar_r,
    fiberfluxivar_i,
    fiberfluxivar_z,
    fiber2flux_u,
    fiber2flux_g,
    fiber2flux_r,
    fiber2flux_i,
    fiber2flux_z,
    fiber2fluxivar_u,
    fiber2fluxivar_g,
    fiber2fluxivar_r,
    fiber2fluxivar_i,
    fiber2fluxivar_z,
    petroflux_u,
    petroflux_g,
    petroflux_r,
    petroflux_i,
    petroflux_z,
    petrofluxivar_u,
    petrofluxivar_g,
    petrofluxivar_r,
    petrofluxivar_i,
    petrofluxivar_z,
    petrorad_u,
    petrorad_g,
    petrorad_r,
    petrorad_i,
    petrorad_z,
    petroraderr_u,
    petroraderr_g,
    petroraderr_r,
    petroraderr_i,
    petroraderr_z,
    petror50_u,
    petror50_g,
    petror50_r,
    petror50_i,
    petror50_z,
    petror50err_u,
    petror50err_g,
    petror50err_r,
    petror50err_i,
    petror50err_z,
    petror90_u,
    petror90_g,
    petror90_r,
    petror90_i,
    petror90_z,
    petror90err_u,
    petror90err_g,
    petror90err_r,
    petror90err_i,
    petror90err_z,
    q_u,
    q_g,
    q_r,
    q_i,
    q_z,
    qerr_u,
    qerr_g,
    qerr_r,
    qerr_i,
    qerr_z,
    u_u,
    u_g,
    u_r,
    u_i,
    u_z,
    uerr_u,
    uerr_g,
    uerr_r,
    uerr_i,
    uerr_z,
    me1_u,
    me1_g,
    me1_r,
    me1_i,
    me1_z,
    me2_u,
    me2_g,
    me2_r,
    me2_i,
    me2_z,
    me1e1err_u,
    me1e1err_g,
    me1e1err_r,
    me1e1err_i,
    me1e1err_z,
    me1e2err_u,
    me1e2err_g,
    me1e2err_r,
    me1e2err_i,
    me1e2err_z,
    me2e2err_u,
    me2e2err_g,
    me2e2err_r,
    me2e2err_i,
    me2e2err_z,
    mrrcc_u,
    mrrcc_g,
    mrrcc_r,
    mrrcc_i,
    mrrcc_z,
    mrrccerr_u,
    mrrccerr_g,
    mrrccerr_r,
    mrrccerr_i,
    mrrccerr_z,
    mcr4_u,
    mcr4_g,
    mcr4_r,
    mcr4_i,
    mcr4_z,
    me1psf_u,
    me1psf_g,
    me1psf_r,
    me1psf_i,
    me1psf_z,
    me2psf_u,
    me2psf_g,
    me2psf_r,
    me2psf_i,
    me2psf_z,
    mrrccpsf_u,
    mrrccpsf_g,
    mrrccpsf_r,
    mrrccpsf_i,
    mrrccpsf_z,
    mcr4psf_u,
    mcr4psf_g,
    mcr4psf_r,
    mcr4psf_i,
    mcr4psf_z,
    devrad_u,
    devrad_g,
    devrad_r,
    devrad_i,
    devrad_z,
    devraderr_u,
    devraderr_g,
    devraderr_r,
    devraderr_i,
    devraderr_z,
    devab_u,
    devab_g,
    devab_r,
    devab_i,
    devab_z,
    devaberr_u,
    devaberr_g,
    devaberr_r,
    devaberr_i,
    devaberr_z,
    devphi_u,
    devphi_g,
    devphi_r,
    devphi_i,
    devphi_z,
    devmag_u,
    devmag_g,
    devmag_r,
    devmag_i,
    devmag_z,
    devmagerr_u,
    devmagerr_g,
    devmagerr_r,
    devmagerr_i,
    devmagerr_z,
    devflux_u,
    devflux_g,
    devflux_r,
    devflux_i,
    devflux_z,
    devfluxivar_u,
    devfluxivar_g,
    devfluxivar_r,
    devfluxivar_i,
    devfluxivar_z,
    exprad_u,
    exprad_g,
    exprad_r,
    exprad_i,
    exprad_z,
    expraderr_u,
    expraderr_g,
    expraderr_r,
    expraderr_i,
    expraderr_z,
    expab_u,
    expab_g,
    expab_r,
    expab_i,
    expab_z,
    expaberr_u,
    expaberr_g,
    expaberr_r,
    expaberr_i,
    expaberr_z,
    expphi_u,
    expphi_g,
    expphi_r,
    expphi_i,
    expphi_z,
    expmag_u,
    expmag_g,
    expmag_r,
    expmag_i,
    expmag_z,
    expmagerr_u,
    expmagerr_g,
    expmagerr_r,
    expmagerr_i,
    expmagerr_z,
    modelmag_u,
    modelmag_g,
    modelmag_r,
    modelmag_i,
    modelmag_z,
    modelmagerr_u,
    modelmagerr_g,
    modelmagerr_r,
    modelmagerr_i,
    modelmagerr_z,
    cmodelmag_u,
    cmodelmag_g,
    cmodelmag_r,
    cmodelmag_i,
    cmodelmag_z,
    cmodelmagerr_u,
    cmodelmagerr_g,
    cmodelmagerr_r,
    cmodelmagerr_i,
    cmodelmagerr_z,
    expflux_u,
    expflux_g,
    expflux_r,
    expflux_i,
    expflux_z,
    expfluxivar_u,
    expfluxivar_g,
    expfluxivar_r,
    expfluxivar_i,
    expfluxivar_z,
    modelflux_u,
    modelflux_g,
    modelflux_r,
    modelflux_i,
    modelflux_z,
    modelfluxivar_u,
    modelfluxivar_g,
    modelfluxivar_r,
    modelfluxivar_i,
    modelfluxivar_z,
    cmodelflux_u,
    cmodelflux_g,
    cmodelflux_r,
    cmodelflux_i,
    cmodelflux_z,
    cmodelfluxivar_u,
    cmodelfluxivar_g,
    cmodelfluxivar_r,
    cmodelfluxivar_i,
    cmodelfluxivar_z,
    aperflux7_u,
    aperflux7_g,
    aperflux7_r,
    aperflux7_i,
    aperflux7_z,
    aperflux7ivar_u,
    aperflux7ivar_g,
    aperflux7ivar_r,
    aperflux7ivar_i,
    aperflux7ivar_z,
    lnlstar_u,
    lnlstar_g,
    lnlstar_r,
    lnlstar_i,
    lnlstar_z,
    lnlexp_u,
    lnlexp_g,
    lnlexp_r,
    lnlexp_i,
    lnlexp_z,
    lnldev_u,
    lnldev_g,
    lnldev_r,
    lnldev_i,
    lnldev_z,
    fracdev_u,
    fracdev_g,
    fracdev_r,
    fracdev_i,
    fracdev_z,
    flags_u,
    flags_g,
    flags_r,
    flags_i,
    flags_z,
    type_u,
    type_g,
    type_r,
    type_i,
    type_z,
    probpsf_u,
    probpsf_g,
    probpsf_r,
    probpsf_i,
    probpsf_z,
    ra,
    dec,
    cx,
    cy,
    cz,
    raerr,
    decerr,
    b,
    l,
    offsetra_u,
    offsetra_g,
    offsetra_r,
    offsetra_i,
    offsetra_z,
    offsetdec_u,
    offsetdec_g,
    offsetdec_r,
    offsetdec_i,
    offsetdec_z,
    extinction_u,
    extinction_g,
    extinction_r,
    extinction_i,
    extinction_z,
    psffwhm_u,
    psffwhm_g,
    psffwhm_r,
    psffwhm_i,
    psffwhm_z,
    mjd,
    airmass_u,
    airmass_g,
    airmass_r,
    airmass_i,
    airmass_z,
    phioffset_u,
    phioffset_g,
    phioffset_r,
    phioffset_i,
    phioffset_z,
    nprof_u,
    nprof_g,
    nprof_r,
    nprof_i,
    nprof_z,
    loadversion,
    htmid,
    fieldid,
    parentid,
    specobjid,
    u,
    g,
    r,
    i,
    z,
    err_u,
    err_g,
    err_r,
    err_i,
    err_z,
    dered_u,
    dered_g,
    dered_r,
    dered_i,
    dered_z,
    cloudcam_u,
    cloudcam_g,
    cloudcam_r,
    cloudcam_i,
    cloudcam_z,
    resolvestatus,
    thingid,
    balkanid,
    nobserve,
    ndetect,
    nedge,
    score,
    calibstatus_u,
    calibstatus_g,
    calibstatus_r,
    calibstatus_i,
    calibstatus_z,
    nmgypercount_u,
    nmgypercount_g,
    nmgypercount_r,
    nmgypercount_i,
    nmgypercount_z,
    tai_u,
    tai_g,
    tai_r,
    tai_i,
    tai_z,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    use strum::IntoEnumIterator;
    let col_strings = Col::iter().map(|col| col.to_string()).collect();
    map.insert(Sdssdr13Photoprimary.string(), col_strings);
}
