use crate::{column::Column, schema::Schema};

pub struct TmassXsc;

impl Schema for TmassXsc {
    fn string(&self) -> String {
        "tmass_xsc".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display, strum::EnumIter)]
pub enum Col {
    jdate,
    designation,
    ra,
    dec,
    sup_ra,
    sup_dec,
    glon,
    glat,
    density,
    j_m,
    j_msig,
    j_flg,
    j_mtype,
    h_m,
    h_msig,
    h_flg,
    h_mtype,
    k_m,
    k_msig,
    k_flg,
    k_mtype,
    r_k20fe,
    j_m_k20fe,
    j_msig_k20fe,
    j_flg_k20fe,
    h_m_k20fe,
    h_msig_k20fe,
    h_flg_k20fe,
    k_m_k20fe,
    k_msig_k20fe,
    k_flg_k20fe,
    r_3sig,
    j_ba,
    j_phi,
    h_ba,
    h_phi,
    k_ba,
    k_phi,
    sup_r_3sig,
    sup_ba,
    sup_phi,
    r_fe,
    j_m_fe,
    j_msig_fe,
    j_flg_fe,
    h_m_fe,
    h_msig_fe,
    h_flg_fe,
    k_m_fe,
    k_msig_fe,
    k_flg_fe,
    r_ext,
    j_m_ext,
    j_msig_ext,
    j_pchi,
    h_m_ext,
    h_msig_ext,
    h_pchi,
    k_m_ext,
    k_msig_ext,
    k_pchi,
    j_r_eff,
    j_mnsurfb_eff,
    h_r_eff,
    h_mnsurfb_eff,
    k_r_eff,
    k_mnsurfb_eff,
    j_con_indx,
    h_con_indx,
    k_con_indx,
    j_peak,
    h_peak,
    k_peak,
    j_5surf,
    h_5surf,
    k_5surf,
    e_score,
    g_score,
    vc,
    cc_flg,
    im_nx,
    r_k20fc,
    j_m_k20fc,
    j_msig_k20fc,
    j_flg_k20fc,
    h_m_k20fc,
    h_msig_k20fc,
    h_flg_k20fc,
    k_m_k20fc,
    k_msig_k20fc,
    k_flg_k20fc,
    j_r_e,
    j_m_e,
    j_msig_e,
    j_flg_e,
    h_r_e,
    h_m_e,
    h_msig_e,
    h_flg_e,
    k_r_e,
    k_m_e,
    k_msig_e,
    k_flg_e,
    j_r_c,
    j_m_c,
    j_msig_c,
    j_flg_c,
    h_r_c,
    h_m_c,
    h_msig_c,
    h_flg_c,
    k_r_c,
    k_m_c,
    k_msig_c,
    k_flg_c,
    r_fc,
    j_m_fc,
    j_msig_fc,
    j_flg_fc,
    h_m_fc,
    h_msig_fc,
    h_flg_fc,
    k_m_fc,
    k_msig_fc,
    k_flg_fc,
    j_r_i20e,
    j_m_i20e,
    j_msig_i20e,
    j_flg_i20e,
    h_r_i20e,
    h_m_i20e,
    h_msig_i20e,
    h_flg_i20e,
    k_r_i20e,
    k_m_i20e,
    k_msig_i20e,
    k_flg_i20e,
    j_r_i20c,
    j_m_i20c,
    j_msig_i20c,
    j_flg_i20c,
    h_r_i20c,
    h_m_i20c,
    h_msig_i20c,
    h_flg_i20c,
    k_r_i20c,
    k_m_i20c,
    k_msig_i20c,
    k_flg_i20c,
    j_r_i21e,
    j_m_i21e,
    j_msig_i21e,
    j_flg_i21e,
    h_r_i21e,
    h_m_i21e,
    h_msig_i21e,
    h_flg_i21e,
    k_r_i21e,
    k_m_i21e,
    k_msig_i21e,
    k_flg_i21e,
    r_j21fe,
    j_m_j21fe,
    j_msig_j21fe,
    j_flg_j21fe,
    h_m_j21fe,
    h_msig_j21fe,
    h_flg_j21fe,
    k_m_j21fe,
    k_msig_j21fe,
    k_flg_j21fe,
    j_r_i21c,
    j_m_i21c,
    j_msig_i21c,
    j_flg_i21c,
    h_r_i21c,
    h_m_i21c,
    h_msig_i21c,
    h_flg_i21c,
    k_r_i21c,
    k_m_i21c,
    k_msig_i21c,
    k_flg_i21c,
    r_j21fc,
    j_m_j21fc,
    j_msig_j21fc,
    j_flg_j21fc,
    h_m_j21fc,
    h_msig_j21fc,
    h_flg_j21fc,
    k_m_j21fc,
    k_msig_j21fc,
    k_flg_j21fc,
    j_m_5,
    j_msig_5,
    j_flg_5,
    h_m_5,
    h_msig_5,
    h_flg_5,
    k_m_5,
    k_msig_5,
    k_flg_5,
    j_m_7,
    j_msig_7,
    j_flg_7,
    h_m_7,
    h_msig_7,
    h_flg_7,
    k_m_7,
    k_msig_7,
    k_flg_7,
    j_m_10,
    j_msig_10,
    j_flg_10,
    h_m_10,
    h_msig_10,
    h_flg_10,
    k_m_10,
    k_msig_10,
    k_flg_10,
    j_m_15,
    j_msig_15,
    j_flg_15,
    h_m_15,
    h_msig_15,
    h_flg_15,
    k_m_15,
    k_msig_15,
    k_flg_15,
    j_m_20,
    j_msig_20,
    j_flg_20,
    h_m_20,
    h_msig_20,
    h_flg_20,
    k_m_20,
    k_msig_20,
    k_flg_20,
    j_m_25,
    j_msig_25,
    j_flg_25,
    h_m_25,
    h_msig_25,
    h_flg_25,
    k_m_25,
    k_msig_25,
    k_flg_25,
    j_m_30,
    j_msig_30,
    j_flg_30,
    h_m_30,
    h_msig_30,
    h_flg_30,
    k_m_30,
    k_msig_30,
    k_flg_30,
    j_m_40,
    j_msig_40,
    j_flg_40,
    h_m_40,
    h_msig_40,
    h_flg_40,
    k_m_40,
    k_msig_40,
    k_flg_40,
    j_m_50,
    j_msig_50,
    j_flg_50,
    h_m_50,
    h_msig_50,
    h_flg_50,
    k_m_50,
    k_msig_50,
    k_flg_50,
    j_m_60,
    j_msig_60,
    j_flg_60,
    h_m_60,
    h_msig_60,
    h_flg_60,
    k_m_60,
    k_msig_60,
    k_flg_60,
    j_m_70,
    j_msig_70,
    j_flg_70,
    h_m_70,
    h_msig_70,
    h_flg_70,
    k_m_70,
    k_msig_70,
    k_flg_70,
    j_m_sys,
    j_msig_sys,
    h_m_sys,
    h_msig_sys,
    k_m_sys,
    k_msig_sys,
    sys_flg,
    contam_flg,
    j_5sig_ba,
    j_5sig_phi,
    h_5sig_ba,
    h_5sig_phi,
    k_5sig_ba,
    k_5sig_phi,
    j_d_area,
    j_perc_darea,
    h_d_area,
    h_perc_darea,
    k_d_area,
    k_perc_darea,
    j_bisym_rat,
    j_bisym_chi,
    h_bisym_rat,
    h_bisym_chi,
    k_bisym_rat,
    k_bisym_chi,
    j_sh0,
    j_sig_sh0,
    h_sh0,
    h_sig_sh0,
    k_sh0,
    k_sig_sh0,
    j_sc_mxdn,
    j_sc_sh,
    j_sc_wsh,
    j_sc_r23,
    j_sc_1mm,
    j_sc_2mm,
    j_sc_vint,
    j_sc_r1,
    j_sc_msh,
    h_sc_mxdn,
    h_sc_sh,
    h_sc_wsh,
    h_sc_r23,
    h_sc_1mm,
    h_sc_2mm,
    h_sc_vint,
    h_sc_r1,
    h_sc_msh,
    k_sc_mxdn,
    k_sc_sh,
    k_sc_wsh,
    k_sc_r23,
    k_sc_1mm,
    k_sc_2mm,
    k_sc_vint,
    k_sc_r1,
    k_sc_msh,
    j_chif_ellf,
    k_chif_ellf,
    ellfit_flg,
    sup_chif_ellf,
    n_blank,
    n_sub,
    bl_sub_flg,
    id_flg,
    id_cat,
    fg_flg,
    blk_fac,
    j_h,
    j_h_sig,
    h_k,
    h_k_sig,
    j_k,
    j_k_sig,
    b_r,
    r_k,
    b_k,
    r_j,
    b_j,
    j_cal,
    h_cal,
    k_cal,
    dup_src,
    use_src,
    spos,
    sdet,
    prox,
    pxpa,
    pxcntr,
    dist_edge_ns,
    dist_edge_ew,
    dist_edge_flg,
    pts_key,
    mp_key,
    night_key,
    scan_key,
    coadd_key,
    spt_ind,
    clr_ind,
    dirty,
    hemis,
    xdate,
    scan,
    coadd,
    id,
    x,
    y,
    z,
    x_coadd,
    y_coadd,
    j_subst2,
    h_subst2,
    k_subst2,
    j_back,
    h_back,
    k_back,
    j_resid_ann,
    h_resid_ann,
    k_resid_ann,
    j_bndg_per,
    j_bndg_amp,
    h_bndg_per,
    h_bndg_amp,
    k_bndg_per,
    k_bndg_amp,
    j_seetrack,
    h_seetrack,
    k_seetrack,
    cntr,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    use strum::IntoEnumIterator;
    let col_strings = Col::iter().map(|col| col.to_string()).collect();
    map.insert(TmassXsc.string(), col_strings);
}
