// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::schema::Schema;

#[allow(non_camel_case_types)]
pub struct gaiaedr3_distance;

impl Schema for gaiaedr3_distance {
    fn string(&self) -> String {
        "gaiaedr3_distance".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    source_id,
    r_med_geo,
    r_lo_geo,
    r_hi_geo,
    r_med_photogeo,
    r_lo_photogeo,
    r_hi_photogeo,
    flag,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::r_med_geo.to_string());
    col_strings.push(Col::r_lo_geo.to_string());
    col_strings.push(Col::r_hi_geo.to_string());
    col_strings.push(Col::r_med_photogeo.to_string());
    col_strings.push(Col::r_lo_photogeo.to_string());
    col_strings.push(Col::r_hi_photogeo.to_string());
    col_strings.push(Col::flag.to_string());
    map.insert(gaiaedr3_distance.string(), col_strings);
}
