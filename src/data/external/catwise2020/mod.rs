// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the catwise2020 table.

use crate::traits::{Column, Table};

/// The catwise2020 table.
#[allow(non_camel_case_types)]
pub struct catwise2020;

impl Table for catwise2020 {
    fn string(&self) -> String {
        "catwise2020".to_string()
    }
}

/// The columns in the catwise2020 table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    obj_id,
    ra_icrs,
    e_ra_icrs,
    de_icrs,
    e_de_icrs,
    name,
    e_pos,
    xpos,
    ypos,
    sky_w1,
    e_sky_w1,
    conf_w1,
    sky_w2,
    e_sky_w2,
    conf_w2,
    n_w1,
    m_w1,
    n_w2,
    m_w2,
    mjd,
    ra_pm_deg,
    e_ra_pm_deg,
    de_pm_deg,
    e_de_pm_deg,
    e_pos_pm,
    pm_ra,
    e_pm_ra,
    pm_de,
    e_pm_de,
    snr_w1pm,
    snr_w2pm,
    fw1pm,
    e_fw1pm,
    fw2pm,
    e_fw2pm,
    w1mpro_pm,
    e_w1mpro_pm,
    chi2_w1pm,
    w2mpro_pm,
    e_w2mpro_pm,
    chi2_w2pm,
    chi2pm,
    pm_qual,
    dist,
    d_w1mpro,
    chi2d_w1mpro,
    d_w2mpro,
    chi2d_w2mpro,
    elon_avg,
    e_elon_avg,
    elat_avg,
    e_elat_avg,
    d_elon,
    e_d_elon,
    d_elat,
    e_d_elat,
    snrd_elon,
    snrd_elat,
    chi2pm_ra,
    chi2pm_de,
    ka,
    k1,
    k2,
    km,
    plx1,
    e_plx1,
    plx2,
    e_plx2,
    sep,
    ccf,
    abf,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::obj_id.to_string());
    col_strings.push(Col::ra_icrs.to_string());
    col_strings.push(Col::e_ra_icrs.to_string());
    col_strings.push(Col::de_icrs.to_string());
    col_strings.push(Col::e_de_icrs.to_string());
    col_strings.push(Col::name.to_string());
    col_strings.push(Col::e_pos.to_string());
    col_strings.push(Col::xpos.to_string());
    col_strings.push(Col::ypos.to_string());
    col_strings.push(Col::sky_w1.to_string());
    col_strings.push(Col::e_sky_w1.to_string());
    col_strings.push(Col::conf_w1.to_string());
    col_strings.push(Col::sky_w2.to_string());
    col_strings.push(Col::e_sky_w2.to_string());
    col_strings.push(Col::conf_w2.to_string());
    col_strings.push(Col::n_w1.to_string());
    col_strings.push(Col::m_w1.to_string());
    col_strings.push(Col::n_w2.to_string());
    col_strings.push(Col::m_w2.to_string());
    col_strings.push(Col::mjd.to_string());
    col_strings.push(Col::ra_pm_deg.to_string());
    col_strings.push(Col::e_ra_pm_deg.to_string());
    col_strings.push(Col::de_pm_deg.to_string());
    col_strings.push(Col::e_de_pm_deg.to_string());
    col_strings.push(Col::e_pos_pm.to_string());
    col_strings.push(Col::pm_ra.to_string());
    col_strings.push(Col::e_pm_ra.to_string());
    col_strings.push(Col::pm_de.to_string());
    col_strings.push(Col::e_pm_de.to_string());
    col_strings.push(Col::snr_w1pm.to_string());
    col_strings.push(Col::snr_w2pm.to_string());
    col_strings.push(Col::fw1pm.to_string());
    col_strings.push(Col::e_fw1pm.to_string());
    col_strings.push(Col::fw2pm.to_string());
    col_strings.push(Col::e_fw2pm.to_string());
    col_strings.push(Col::w1mpro_pm.to_string());
    col_strings.push(Col::e_w1mpro_pm.to_string());
    col_strings.push(Col::chi2_w1pm.to_string());
    col_strings.push(Col::w2mpro_pm.to_string());
    col_strings.push(Col::e_w2mpro_pm.to_string());
    col_strings.push(Col::chi2_w2pm.to_string());
    col_strings.push(Col::chi2pm.to_string());
    col_strings.push(Col::pm_qual.to_string());
    col_strings.push(Col::dist.to_string());
    col_strings.push(Col::d_w1mpro.to_string());
    col_strings.push(Col::chi2d_w1mpro.to_string());
    col_strings.push(Col::d_w2mpro.to_string());
    col_strings.push(Col::chi2d_w2mpro.to_string());
    col_strings.push(Col::elon_avg.to_string());
    col_strings.push(Col::e_elon_avg.to_string());
    col_strings.push(Col::elat_avg.to_string());
    col_strings.push(Col::e_elat_avg.to_string());
    col_strings.push(Col::d_elon.to_string());
    col_strings.push(Col::e_d_elon.to_string());
    col_strings.push(Col::d_elat.to_string());
    col_strings.push(Col::e_d_elat.to_string());
    col_strings.push(Col::snrd_elon.to_string());
    col_strings.push(Col::snrd_elat.to_string());
    col_strings.push(Col::chi2pm_ra.to_string());
    col_strings.push(Col::chi2pm_de.to_string());
    col_strings.push(Col::ka.to_string());
    col_strings.push(Col::k1.to_string());
    col_strings.push(Col::k2.to_string());
    col_strings.push(Col::km.to_string());
    col_strings.push(Col::plx1.to_string());
    col_strings.push(Col::e_plx1.to_string());
    col_strings.push(Col::plx2.to_string());
    col_strings.push(Col::e_plx2.to_string());
    col_strings.push(Col::sep.to_string());
    col_strings.push(Col::ccf.to_string());
    col_strings.push(Col::abf.to_string());
    map.insert(catwise2020.string(), col_strings);
}
