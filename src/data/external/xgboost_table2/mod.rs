// This code is generated by generate_code.py, do not modify it manually.
use crate::traits::{Column, Table};

#[allow(non_camel_case_types)]
pub struct xgboost_table2;

impl Table for xgboost_table2 {
    fn string(&self) -> String {
        "xgboost_table2".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    source_id,
    l,
    b,
    ra,
    dec,
    parallax_corrected,
    parallax_error,
    pmra,
    pmra_error,
    pmdec,
    pmdec_error,
    ruwe,
    radial_velocity,
    radial_velocity_error,
    phot_g_mean_mag,
    phot_bp_mean_mag,
    phot_rp_mean_mag,
    catwise_w1,
    catwise_w2,
    mh_xgboost,
    teff_xgboost,
    logg_xgboost,
    in_training_sample,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::l.to_string());
    col_strings.push(Col::b.to_string());
    col_strings.push(Col::ra.to_string());
    col_strings.push(Col::dec.to_string());
    col_strings.push(Col::parallax_corrected.to_string());
    col_strings.push(Col::parallax_error.to_string());
    col_strings.push(Col::pmra.to_string());
    col_strings.push(Col::pmra_error.to_string());
    col_strings.push(Col::pmdec.to_string());
    col_strings.push(Col::pmdec_error.to_string());
    col_strings.push(Col::ruwe.to_string());
    col_strings.push(Col::radial_velocity.to_string());
    col_strings.push(Col::radial_velocity_error.to_string());
    col_strings.push(Col::phot_g_mean_mag.to_string());
    col_strings.push(Col::phot_bp_mean_mag.to_string());
    col_strings.push(Col::phot_rp_mean_mag.to_string());
    col_strings.push(Col::catwise_w1.to_string());
    col_strings.push(Col::catwise_w2.to_string());
    col_strings.push(Col::mh_xgboost.to_string());
    col_strings.push(Col::teff_xgboost.to_string());
    col_strings.push(Col::logg_xgboost.to_string());
    col_strings.push(Col::in_training_sample.to_string());
    map.insert(xgboost_table2.string(), col_strings);
}
