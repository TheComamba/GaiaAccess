// This code is generated by generate_code.py, do not modify it manually.
use crate::traits::{Column, Table};

#[allow(non_camel_case_types)]
pub struct apassdr9;

impl Table for apassdr9 {
    fn string(&self) -> String {
        "apassdr9".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    recno,
    raj2000,
    dej2000,
    e_ra,
    e_dec,
    field,
    nobs,
    mobs,
    b_v,
    e_b_v,
    vmag,
    e_vmag,
    u_e_vmag,
    bmag,
    e_bmag,
    u_e_bmag,
    g_mag,
    e_g_mag,
    u_e_g_mag,
    r_mag,
    e_r_mag,
    u_e_r_mag,
    i_mag,
    e_i_mag,
    u_e_i_mag,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::recno.to_string());
    col_strings.push(Col::raj2000.to_string());
    col_strings.push(Col::dej2000.to_string());
    col_strings.push(Col::e_ra.to_string());
    col_strings.push(Col::e_dec.to_string());
    col_strings.push(Col::field.to_string());
    col_strings.push(Col::nobs.to_string());
    col_strings.push(Col::mobs.to_string());
    col_strings.push(Col::b_v.to_string());
    col_strings.push(Col::e_b_v.to_string());
    col_strings.push(Col::vmag.to_string());
    col_strings.push(Col::e_vmag.to_string());
    col_strings.push(Col::u_e_vmag.to_string());
    col_strings.push(Col::bmag.to_string());
    col_strings.push(Col::e_bmag.to_string());
    col_strings.push(Col::u_e_bmag.to_string());
    col_strings.push(Col::g_mag.to_string());
    col_strings.push(Col::e_g_mag.to_string());
    col_strings.push(Col::u_e_g_mag.to_string());
    col_strings.push(Col::r_mag.to_string());
    col_strings.push(Col::e_r_mag.to_string());
    col_strings.push(Col::u_e_r_mag.to_string());
    col_strings.push(Col::i_mag.to_string());
    col_strings.push(Col::e_i_mag.to_string());
    col_strings.push(Col::u_e_i_mag.to_string());
    map.insert(apassdr9.string(), col_strings);
}
