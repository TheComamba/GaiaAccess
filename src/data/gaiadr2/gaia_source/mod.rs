// This code is generated by generate_code.py, do not modify it manually
use crate::traits::{Column, Table};

#[allow(non_camel_case_types)]
pub struct gaia_source;

impl Table for gaia_source {
    fn string(&self) -> String {
        "gaia_source".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    solution_id,
    designation,
    source_id,
    random_index,
    ref_epoch,
    ra,
    ra_error,
    dec,
    dec_error,
    parallax,
    parallax_error,
    parallax_over_error,
    pmra,
    pmra_error,
    pmdec,
    pmdec_error,
    ra_dec_corr,
    ra_parallax_corr,
    ra_pmra_corr,
    ra_pmdec_corr,
    dec_parallax_corr,
    dec_pmra_corr,
    dec_pmdec_corr,
    parallax_pmra_corr,
    parallax_pmdec_corr,
    pmra_pmdec_corr,
    astrometric_n_obs_al,
    astrometric_n_obs_ac,
    astrometric_n_good_obs_al,
    astrometric_n_bad_obs_al,
    astrometric_gof_al,
    astrometric_chi2_al,
    astrometric_excess_noise,
    astrometric_excess_noise_sig,
    astrometric_params_solved,
    astrometric_primary_flag,
    astrometric_weight_al,
    astrometric_pseudo_colour,
    astrometric_pseudo_colour_error,
    mean_varpi_factor_al,
    astrometric_matched_observations,
    visibility_periods_used,
    astrometric_sigma5d_max,
    frame_rotator_object_type,
    matched_observations,
    duplicated_source,
    phot_g_n_obs,
    phot_g_mean_flux,
    phot_g_mean_flux_error,
    phot_g_mean_flux_over_error,
    phot_g_mean_mag,
    phot_bp_n_obs,
    phot_bp_mean_flux,
    phot_bp_mean_flux_error,
    phot_bp_mean_flux_over_error,
    phot_bp_mean_mag,
    phot_rp_n_obs,
    phot_rp_mean_flux,
    phot_rp_mean_flux_error,
    phot_rp_mean_flux_over_error,
    phot_rp_mean_mag,
    phot_bp_rp_excess_factor,
    phot_proc_mode,
    bp_rp,
    bp_g,
    g_rp,
    radial_velocity,
    radial_velocity_error,
    rv_nb_transits,
    rv_template_teff,
    rv_template_logg,
    rv_template_fe_h,
    phot_variable_flag,
    l,
    b,
    ecl_lon,
    ecl_lat,
    priam_flags,
    teff_val,
    teff_percentile_lower,
    teff_percentile_upper,
    a_g_val,
    a_g_percentile_lower,
    a_g_percentile_upper,
    e_bp_min_rp_val,
    e_bp_min_rp_percentile_lower,
    e_bp_min_rp_percentile_upper,
    flame_flags,
    radius_val,
    radius_percentile_lower,
    radius_percentile_upper,
    lum_val,
    lum_percentile_lower,
    lum_percentile_upper,
    datalink_url,
    epoch_photometry_url,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::designation.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::random_index.to_string());
    col_strings.push(Col::ref_epoch.to_string());
    col_strings.push(Col::ra.to_string());
    col_strings.push(Col::ra_error.to_string());
    col_strings.push(Col::dec.to_string());
    col_strings.push(Col::dec_error.to_string());
    col_strings.push(Col::parallax.to_string());
    col_strings.push(Col::parallax_error.to_string());
    col_strings.push(Col::parallax_over_error.to_string());
    col_strings.push(Col::pmra.to_string());
    col_strings.push(Col::pmra_error.to_string());
    col_strings.push(Col::pmdec.to_string());
    col_strings.push(Col::pmdec_error.to_string());
    col_strings.push(Col::ra_dec_corr.to_string());
    col_strings.push(Col::ra_parallax_corr.to_string());
    col_strings.push(Col::ra_pmra_corr.to_string());
    col_strings.push(Col::ra_pmdec_corr.to_string());
    col_strings.push(Col::dec_parallax_corr.to_string());
    col_strings.push(Col::dec_pmra_corr.to_string());
    col_strings.push(Col::dec_pmdec_corr.to_string());
    col_strings.push(Col::parallax_pmra_corr.to_string());
    col_strings.push(Col::parallax_pmdec_corr.to_string());
    col_strings.push(Col::pmra_pmdec_corr.to_string());
    col_strings.push(Col::astrometric_n_obs_al.to_string());
    col_strings.push(Col::astrometric_n_obs_ac.to_string());
    col_strings.push(Col::astrometric_n_good_obs_al.to_string());
    col_strings.push(Col::astrometric_n_bad_obs_al.to_string());
    col_strings.push(Col::astrometric_gof_al.to_string());
    col_strings.push(Col::astrometric_chi2_al.to_string());
    col_strings.push(Col::astrometric_excess_noise.to_string());
    col_strings.push(Col::astrometric_excess_noise_sig.to_string());
    col_strings.push(Col::astrometric_params_solved.to_string());
    col_strings.push(Col::astrometric_primary_flag.to_string());
    col_strings.push(Col::astrometric_weight_al.to_string());
    col_strings.push(Col::astrometric_pseudo_colour.to_string());
    col_strings.push(Col::astrometric_pseudo_colour_error.to_string());
    col_strings.push(Col::mean_varpi_factor_al.to_string());
    col_strings.push(Col::astrometric_matched_observations.to_string());
    col_strings.push(Col::visibility_periods_used.to_string());
    col_strings.push(Col::astrometric_sigma5d_max.to_string());
    col_strings.push(Col::frame_rotator_object_type.to_string());
    col_strings.push(Col::matched_observations.to_string());
    col_strings.push(Col::duplicated_source.to_string());
    col_strings.push(Col::phot_g_n_obs.to_string());
    col_strings.push(Col::phot_g_mean_flux.to_string());
    col_strings.push(Col::phot_g_mean_flux_error.to_string());
    col_strings.push(Col::phot_g_mean_flux_over_error.to_string());
    col_strings.push(Col::phot_g_mean_mag.to_string());
    col_strings.push(Col::phot_bp_n_obs.to_string());
    col_strings.push(Col::phot_bp_mean_flux.to_string());
    col_strings.push(Col::phot_bp_mean_flux_error.to_string());
    col_strings.push(Col::phot_bp_mean_flux_over_error.to_string());
    col_strings.push(Col::phot_bp_mean_mag.to_string());
    col_strings.push(Col::phot_rp_n_obs.to_string());
    col_strings.push(Col::phot_rp_mean_flux.to_string());
    col_strings.push(Col::phot_rp_mean_flux_error.to_string());
    col_strings.push(Col::phot_rp_mean_flux_over_error.to_string());
    col_strings.push(Col::phot_rp_mean_mag.to_string());
    col_strings.push(Col::phot_bp_rp_excess_factor.to_string());
    col_strings.push(Col::phot_proc_mode.to_string());
    col_strings.push(Col::bp_rp.to_string());
    col_strings.push(Col::bp_g.to_string());
    col_strings.push(Col::g_rp.to_string());
    col_strings.push(Col::radial_velocity.to_string());
    col_strings.push(Col::radial_velocity_error.to_string());
    col_strings.push(Col::rv_nb_transits.to_string());
    col_strings.push(Col::rv_template_teff.to_string());
    col_strings.push(Col::rv_template_logg.to_string());
    col_strings.push(Col::rv_template_fe_h.to_string());
    col_strings.push(Col::phot_variable_flag.to_string());
    col_strings.push(Col::l.to_string());
    col_strings.push(Col::b.to_string());
    col_strings.push(Col::ecl_lon.to_string());
    col_strings.push(Col::ecl_lat.to_string());
    col_strings.push(Col::priam_flags.to_string());
    col_strings.push(Col::teff_val.to_string());
    col_strings.push(Col::teff_percentile_lower.to_string());
    col_strings.push(Col::teff_percentile_upper.to_string());
    col_strings.push(Col::a_g_val.to_string());
    col_strings.push(Col::a_g_percentile_lower.to_string());
    col_strings.push(Col::a_g_percentile_upper.to_string());
    col_strings.push(Col::e_bp_min_rp_val.to_string());
    col_strings.push(Col::e_bp_min_rp_percentile_lower.to_string());
    col_strings.push(Col::e_bp_min_rp_percentile_upper.to_string());
    col_strings.push(Col::flame_flags.to_string());
    col_strings.push(Col::radius_val.to_string());
    col_strings.push(Col::radius_percentile_lower.to_string());
    col_strings.push(Col::radius_percentile_upper.to_string());
    col_strings.push(Col::lum_val.to_string());
    col_strings.push(Col::lum_percentile_lower.to_string());
    col_strings.push(Col::lum_percentile_upper.to_string());
    col_strings.push(Col::datalink_url.to_string());
    col_strings.push(Col::epoch_photometry_url.to_string());
    map.insert(gaia_source.string(), col_strings);
}
