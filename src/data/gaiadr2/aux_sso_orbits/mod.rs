
// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::schema::Schema;

#[allow(non_camel_case_types)]
pub struct aux_sso_orbits;

impl Schema for aux_sso_orbits {
    fn string(&self) -> String {
        "aux_sso_orbits".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    solution_id,
number_mp,
designation,
mag_h,
slope_g,
code,
obs_arc,
obs_num,
osc_epoch,
orb_m,
omega,
node_omega,
inclination,
eccentricity,
a,
orb_date,
ceu,
ceu_rate,
ceu_epoch,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    use strum::IntoEnumIterator;
    col_strings.push(Col::solution_id.to_string());
col_strings.push(Col::number_mp.to_string());
col_strings.push(Col::designation.to_string());
col_strings.push(Col::mag_h.to_string());
col_strings.push(Col::slope_g.to_string());
col_strings.push(Col::code.to_string());
col_strings.push(Col::obs_arc.to_string());
col_strings.push(Col::obs_num.to_string());
col_strings.push(Col::osc_epoch.to_string());
col_strings.push(Col::orb_m.to_string());
col_strings.push(Col::omega.to_string());
col_strings.push(Col::node_omega.to_string());
col_strings.push(Col::inclination.to_string());
col_strings.push(Col::eccentricity.to_string());
col_strings.push(Col::a.to_string());
col_strings.push(Col::orb_date.to_string());
col_strings.push(Col::ceu.to_string());
col_strings.push(Col::ceu_rate.to_string());
col_strings.push(Col::ceu_epoch.to_string());
    map.insert(aux_sso_orbits.string(), col_strings);
}
