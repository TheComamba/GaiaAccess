
// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::schema::Schema;

#[allow(non_camel_case_types)]
pub struct frame_rotator_source;

impl Schema for frame_rotator_source {
    fn string(&self) -> String {
        "frame_rotator_source".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    source_id,
considered_for_reference_frame_orientation,
used_for_reference_frame_orientation,
considered_for_reference_frame_spin,
used_for_reference_frame_spin,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    use strum::IntoEnumIterator;
    col_strings.push(Col::source_id.to_string());
col_strings.push(Col::considered_for_reference_frame_orientation.to_string());
col_strings.push(Col::used_for_reference_frame_orientation.to_string());
col_strings.push(Col::considered_for_reference_frame_spin.to_string());
col_strings.push(Col::used_for_reference_frame_spin.to_string());
    map.insert(frame_rotator_source.string(), col_strings);
}
