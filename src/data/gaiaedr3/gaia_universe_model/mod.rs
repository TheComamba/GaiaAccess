
// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::schema::Schema;

#[allow(non_camel_case_types)]
pub struct gaia_universe_model;

impl Schema for gaia_universe_model {
    fn string(&self) -> String {
        "gaia_universe_model".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    source_extended_id,
source_id,
solution_id,
ra,
dec,
barycentric_distance,
pmra,
pmdec,
radial_velocity,
mag_g,
mag_bp,
mag_rp,
mag_rvs,
v_i,
mean_absolute_v,
ag,
av,
teff,
spectral_type,
logg,
feh,
alphafe,
mbol,
age,
mass,
radius,
vsini,
population,
has_photocenter_motion,
nc,
nt,
semimajor_axis,
eccentricity,
inclination,
longitude_ascending_node,
orbit_period,
periastron_date,
periastron_argument,
variability_type,
variability_amplitude,
variability_period,
variability_phase,
r_env_r_star,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    use strum::IntoEnumIterator;
    col_strings.push(Col::source_extended_id.to_string());
col_strings.push(Col::source_id.to_string());
col_strings.push(Col::solution_id.to_string());
col_strings.push(Col::ra.to_string());
col_strings.push(Col::dec.to_string());
col_strings.push(Col::barycentric_distance.to_string());
col_strings.push(Col::pmra.to_string());
col_strings.push(Col::pmdec.to_string());
col_strings.push(Col::radial_velocity.to_string());
col_strings.push(Col::mag_g.to_string());
col_strings.push(Col::mag_bp.to_string());
col_strings.push(Col::mag_rp.to_string());
col_strings.push(Col::mag_rvs.to_string());
col_strings.push(Col::v_i.to_string());
col_strings.push(Col::mean_absolute_v.to_string());
col_strings.push(Col::ag.to_string());
col_strings.push(Col::av.to_string());
col_strings.push(Col::teff.to_string());
col_strings.push(Col::spectral_type.to_string());
col_strings.push(Col::logg.to_string());
col_strings.push(Col::feh.to_string());
col_strings.push(Col::alphafe.to_string());
col_strings.push(Col::mbol.to_string());
col_strings.push(Col::age.to_string());
col_strings.push(Col::mass.to_string());
col_strings.push(Col::radius.to_string());
col_strings.push(Col::vsini.to_string());
col_strings.push(Col::population.to_string());
col_strings.push(Col::has_photocenter_motion.to_string());
col_strings.push(Col::nc.to_string());
col_strings.push(Col::nt.to_string());
col_strings.push(Col::semimajor_axis.to_string());
col_strings.push(Col::eccentricity.to_string());
col_strings.push(Col::inclination.to_string());
col_strings.push(Col::longitude_ascending_node.to_string());
col_strings.push(Col::orbit_period.to_string());
col_strings.push(Col::periastron_date.to_string());
col_strings.push(Col::periastron_argument.to_string());
col_strings.push(Col::variability_type.to_string());
col_strings.push(Col::variability_amplitude.to_string());
col_strings.push(Col::variability_period.to_string());
col_strings.push(Col::variability_phase.to_string());
col_strings.push(Col::r_env_r_star.to_string());
    map.insert(gaia_universe_model.string(), col_strings);
}
