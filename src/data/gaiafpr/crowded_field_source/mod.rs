// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::schema::Schema;

#[allow(non_camel_case_types)]
pub struct crowded_field_source;

impl Schema for crowded_field_source {
    fn string(&self) -> String {
        "crowded_field_source".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    solution_id,
    designation,
    region_name,
    source_id,
    ref_epoch,
    ra,
    ra_error,
    dec,
    dec_error,
    parallax,
    parallax_error,
    parallax_over_error,
    pm,
    pmra,
    pmra_error,
    pmdec,
    pmdec_error,
    ra_dec_corr,
    ra_parallax_corr,
    ra_pmra_corr,
    ra_pmdec_corr,
    dec_parallax_corr,
    dec_pmra_corr,
    dec_pmdec_corr,
    parallax_pmra_corr,
    parallax_pmdec_corr,
    pmra_pmdec_corr,
    n_scans,
    astrometric_n_obs_al,
    astrometric_n_obs_ac,
    astrometric_n_good_obs_al,
    astrometric_n_bad_obs_al,
    astrometric_gof_al,
    astrometric_chi2_al,
    astrometric_excess_noise,
    astrometric_excess_noise_sig,
    astrometric_params_solved,
    pseudocolour,
    pseudocolour_error,
    ra_pseudocolour_corr,
    dec_pseudocolour_corr,
    parallax_pseudocolour_corr,
    pmra_pseudocolour_corr,
    pmdec_pseudocolour_corr,
    astrometric_matched_transits,
    visibility_periods_used,
    astrometric_sigma5d_max,
    matched_transits,
    ipd_gof_harmonic_amplitude,
    ipd_gof_harmonic_phase,
    scan_direction_strength_k1,
    scan_direction_strength_k2,
    scan_direction_strength_k3,
    scan_direction_strength_k4,
    scan_direction_mean_k1,
    scan_direction_mean_k2,
    scan_direction_mean_k3,
    scan_direction_mean_k4,
    astrometric_primary_flag,
    phot_g_n_obs,
    phot_g_mean_flux,
    phot_g_mean_flux_error,
    phot_g_mean_flux_over_error,
    phot_g_mean_mag,
    phot_g_flux_uwv,
    phot_g_flux_median,
    phot_g_flux_skewness,
    phot_g_flux_kurtosis,
    phot_g_flux_mad,
    phot_g_flux_first_quartile,
    phot_g_flux_third_quartile,
    phot_g_flux_min,
    phot_g_flux_max,
    phot_proc_mode,
    l,
    b,
    ecl_lon,
    ecl_lat,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::designation.to_string());
    col_strings.push(Col::region_name.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::ref_epoch.to_string());
    col_strings.push(Col::ra.to_string());
    col_strings.push(Col::ra_error.to_string());
    col_strings.push(Col::dec.to_string());
    col_strings.push(Col::dec_error.to_string());
    col_strings.push(Col::parallax.to_string());
    col_strings.push(Col::parallax_error.to_string());
    col_strings.push(Col::parallax_over_error.to_string());
    col_strings.push(Col::pm.to_string());
    col_strings.push(Col::pmra.to_string());
    col_strings.push(Col::pmra_error.to_string());
    col_strings.push(Col::pmdec.to_string());
    col_strings.push(Col::pmdec_error.to_string());
    col_strings.push(Col::ra_dec_corr.to_string());
    col_strings.push(Col::ra_parallax_corr.to_string());
    col_strings.push(Col::ra_pmra_corr.to_string());
    col_strings.push(Col::ra_pmdec_corr.to_string());
    col_strings.push(Col::dec_parallax_corr.to_string());
    col_strings.push(Col::dec_pmra_corr.to_string());
    col_strings.push(Col::dec_pmdec_corr.to_string());
    col_strings.push(Col::parallax_pmra_corr.to_string());
    col_strings.push(Col::parallax_pmdec_corr.to_string());
    col_strings.push(Col::pmra_pmdec_corr.to_string());
    col_strings.push(Col::n_scans.to_string());
    col_strings.push(Col::astrometric_n_obs_al.to_string());
    col_strings.push(Col::astrometric_n_obs_ac.to_string());
    col_strings.push(Col::astrometric_n_good_obs_al.to_string());
    col_strings.push(Col::astrometric_n_bad_obs_al.to_string());
    col_strings.push(Col::astrometric_gof_al.to_string());
    col_strings.push(Col::astrometric_chi2_al.to_string());
    col_strings.push(Col::astrometric_excess_noise.to_string());
    col_strings.push(Col::astrometric_excess_noise_sig.to_string());
    col_strings.push(Col::astrometric_params_solved.to_string());
    col_strings.push(Col::pseudocolour.to_string());
    col_strings.push(Col::pseudocolour_error.to_string());
    col_strings.push(Col::ra_pseudocolour_corr.to_string());
    col_strings.push(Col::dec_pseudocolour_corr.to_string());
    col_strings.push(Col::parallax_pseudocolour_corr.to_string());
    col_strings.push(Col::pmra_pseudocolour_corr.to_string());
    col_strings.push(Col::pmdec_pseudocolour_corr.to_string());
    col_strings.push(Col::astrometric_matched_transits.to_string());
    col_strings.push(Col::visibility_periods_used.to_string());
    col_strings.push(Col::astrometric_sigma5d_max.to_string());
    col_strings.push(Col::matched_transits.to_string());
    col_strings.push(Col::ipd_gof_harmonic_amplitude.to_string());
    col_strings.push(Col::ipd_gof_harmonic_phase.to_string());
    col_strings.push(Col::scan_direction_strength_k1.to_string());
    col_strings.push(Col::scan_direction_strength_k2.to_string());
    col_strings.push(Col::scan_direction_strength_k3.to_string());
    col_strings.push(Col::scan_direction_strength_k4.to_string());
    col_strings.push(Col::scan_direction_mean_k1.to_string());
    col_strings.push(Col::scan_direction_mean_k2.to_string());
    col_strings.push(Col::scan_direction_mean_k3.to_string());
    col_strings.push(Col::scan_direction_mean_k4.to_string());
    col_strings.push(Col::astrometric_primary_flag.to_string());
    col_strings.push(Col::phot_g_n_obs.to_string());
    col_strings.push(Col::phot_g_mean_flux.to_string());
    col_strings.push(Col::phot_g_mean_flux_error.to_string());
    col_strings.push(Col::phot_g_mean_flux_over_error.to_string());
    col_strings.push(Col::phot_g_mean_mag.to_string());
    col_strings.push(Col::phot_g_flux_uwv.to_string());
    col_strings.push(Col::phot_g_flux_median.to_string());
    col_strings.push(Col::phot_g_flux_skewness.to_string());
    col_strings.push(Col::phot_g_flux_kurtosis.to_string());
    col_strings.push(Col::phot_g_flux_mad.to_string());
    col_strings.push(Col::phot_g_flux_first_quartile.to_string());
    col_strings.push(Col::phot_g_flux_third_quartile.to_string());
    col_strings.push(Col::phot_g_flux_min.to_string());
    col_strings.push(Col::phot_g_flux_max.to_string());
    col_strings.push(Col::phot_proc_mode.to_string());
    col_strings.push(Col::l.to_string());
    col_strings.push(Col::b.to_string());
    col_strings.push(Col::ecl_lon.to_string());
    col_strings.push(Col::ecl_lat.to_string());
    map.insert(crowded_field_source.string(), col_strings);
}
