// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::table::Table;

#[allow(non_camel_case_types)]
pub struct urat1_original_valid;

impl Table for urat1_original_valid {
    fn string(&self) -> String {
        "urat1_original_valid".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    urat1_oid,
    urat1_identifier,
    ra,
    dec,
    ra_error,
    dec_error,
    epoch,
    f_mag,
    f_mag_error,
    b_mag,
    v_mag,
    g_mag,
    r_mag,
    i_mag,
    b_mag_error,
    v_mag_error,
    g_mag_error,
    r_mag_error,
    i_mag_error,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::urat1_oid.to_string());
    col_strings.push(Col::urat1_identifier.to_string());
    col_strings.push(Col::ra.to_string());
    col_strings.push(Col::dec.to_string());
    col_strings.push(Col::ra_error.to_string());
    col_strings.push(Col::dec_error.to_string());
    col_strings.push(Col::epoch.to_string());
    col_strings.push(Col::f_mag.to_string());
    col_strings.push(Col::f_mag_error.to_string());
    col_strings.push(Col::b_mag.to_string());
    col_strings.push(Col::v_mag.to_string());
    col_strings.push(Col::g_mag.to_string());
    col_strings.push(Col::r_mag.to_string());
    col_strings.push(Col::i_mag.to_string());
    col_strings.push(Col::b_mag_error.to_string());
    col_strings.push(Col::v_mag_error.to_string());
    col_strings.push(Col::g_mag_error.to_string());
    col_strings.push(Col::r_mag_error.to_string());
    col_strings.push(Col::i_mag_error.to_string());
    map.insert(urat1_original_valid.string(), col_strings);
}
