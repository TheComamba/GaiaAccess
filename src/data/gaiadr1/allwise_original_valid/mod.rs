// This code is generated by generate_code.py, do not modify it manually.
use crate::traits::{Column, Table};

#[allow(non_camel_case_types)]
pub struct allwise_original_valid;

impl Table for allwise_original_valid {
    fn string(&self) -> String {
        "allwise_original_valid".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    allwise_oid,
    designation,
    ra,
    dec,
    ra_error,
    dec_error,
    radec_co_error,
    w1mpro,
    w1mpro_error,
    w2mpro,
    w2mpro_error,
    w3mpro,
    w3mpro_error,
    w4mpro,
    w4mpro_error,
    cc_flags,
    ext_flag,
    var_flag,
    ph_qual,
    w1mjd_mean,
    w2mjd_mean,
    w3mjd_mean,
    w4mjd_mean,
    w1gmag,
    w1gmag_error,
    w2gmag,
    w2gmag_error,
    w3gmag,
    w3gmag_error,
    w4gmag,
    w4gmag_error,
    tmass_key,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::allwise_oid.to_string());
    col_strings.push(Col::designation.to_string());
    col_strings.push(Col::ra.to_string());
    col_strings.push(Col::dec.to_string());
    col_strings.push(Col::ra_error.to_string());
    col_strings.push(Col::dec_error.to_string());
    col_strings.push(Col::radec_co_error.to_string());
    col_strings.push(Col::w1mpro.to_string());
    col_strings.push(Col::w1mpro_error.to_string());
    col_strings.push(Col::w2mpro.to_string());
    col_strings.push(Col::w2mpro_error.to_string());
    col_strings.push(Col::w3mpro.to_string());
    col_strings.push(Col::w3mpro_error.to_string());
    col_strings.push(Col::w4mpro.to_string());
    col_strings.push(Col::w4mpro_error.to_string());
    col_strings.push(Col::cc_flags.to_string());
    col_strings.push(Col::ext_flag.to_string());
    col_strings.push(Col::var_flag.to_string());
    col_strings.push(Col::ph_qual.to_string());
    col_strings.push(Col::w1mjd_mean.to_string());
    col_strings.push(Col::w2mjd_mean.to_string());
    col_strings.push(Col::w3mjd_mean.to_string());
    col_strings.push(Col::w4mjd_mean.to_string());
    col_strings.push(Col::w1gmag.to_string());
    col_strings.push(Col::w1gmag_error.to_string());
    col_strings.push(Col::w2gmag.to_string());
    col_strings.push(Col::w2gmag_error.to_string());
    col_strings.push(Col::w3gmag.to_string());
    col_strings.push(Col::w3gmag_error.to_string());
    col_strings.push(Col::w4gmag.to_string());
    col_strings.push(Col::w4gmag_error.to_string());
    col_strings.push(Col::tmass_key.to_string());
    map.insert(allwise_original_valid.string(), col_strings);
}
