// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the sdssdr9_original_valid table.

use crate::traits::{Column, Table};

/// The sdssdr9_original_valid table.
#[allow(non_camel_case_types)]
pub struct sdssdr9_original_valid;

impl Table for sdssdr9_original_valid {
    fn string(&self) -> String {
        "sdssdr9_original_valid".to_string()
    }
}

/// The columns in the sdssdr9_original_valid table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    sdssdr9_oid,
    obj_id,
    thing_id,
    ra,
    dec,
    ra_error,
    dec_error,
    mjd,
    u_mag,
    u_mag_error,
    g_mag,
    g_mag_error,
    r_mag,
    r_mag_error,
    i_mag,
    i_mag_error,
    z_mag,
    z_mag_error,
    objc_type,
    clean_flag,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::sdssdr9_oid.to_string());
    col_strings.push(Col::obj_id.to_string());
    col_strings.push(Col::thing_id.to_string());
    col_strings.push(Col::ra.to_string());
    col_strings.push(Col::dec.to_string());
    col_strings.push(Col::ra_error.to_string());
    col_strings.push(Col::dec_error.to_string());
    col_strings.push(Col::mjd.to_string());
    col_strings.push(Col::u_mag.to_string());
    col_strings.push(Col::u_mag_error.to_string());
    col_strings.push(Col::g_mag.to_string());
    col_strings.push(Col::g_mag_error.to_string());
    col_strings.push(Col::r_mag.to_string());
    col_strings.push(Col::r_mag_error.to_string());
    col_strings.push(Col::i_mag.to_string());
    col_strings.push(Col::i_mag_error.to_string());
    col_strings.push(Col::z_mag.to_string());
    col_strings.push(Col::z_mag_error.to_string());
    col_strings.push(Col::objc_type.to_string());
    col_strings.push(Col::clean_flag.to_string());
    map.insert(sdssdr9_original_valid.string(), col_strings);
}
