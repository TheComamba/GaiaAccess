// This code is generated by generate_code.py, do not modify it manually
use crate::schema::Schema;

#[allow(non_camel_case_types)]
pub struct gaiadr1;

impl Schema for gaiadr1 {
    fn string(&self) -> String {
        "gaiadr1".to_string()
    }
}

#[cfg(any(allwise_best_neighbour, test))]
pub mod allwise_best_neighbour;
#[cfg(any(allwise_neighbourhood, test))]
pub mod allwise_neighbourhood;
#[cfg(any(allwise_original_valid, test))]
pub mod allwise_original_valid;
#[cfg(any(aux_qso_icrf2_match, test))]
pub mod aux_qso_icrf2_match;
#[cfg(any(cepheid, test))]
pub mod cepheid;
#[cfg(any(ext_phot_zero_point, test))]
pub mod ext_phot_zero_point;
#[cfg(any(gaia_source, test))]
pub mod gaia_source;
#[cfg(any(gsc23_best_neighbour, test))]
pub mod gsc23_best_neighbour;
#[cfg(any(gsc23_neighbourhood, test))]
pub mod gsc23_neighbourhood;
#[cfg(any(gsc23_original_valid, test))]
pub mod gsc23_original_valid;
#[cfg(any(phot_variable_time_series_gfov, test))]
pub mod phot_variable_time_series_gfov;
#[cfg(any(phot_variable_time_series_gfov_statistical_parameters, test))]
pub mod phot_variable_time_series_gfov_statistical_parameters;
#[cfg(any(ppmxl_best_neighbour, test))]
pub mod ppmxl_best_neighbour;
#[cfg(any(ppmxl_neighbourhood, test))]
pub mod ppmxl_neighbourhood;
#[cfg(any(ppmxl_original_valid, test))]
pub mod ppmxl_original_valid;
#[cfg(any(rrlyrae, test))]
pub mod rrlyrae;
#[cfg(any(sdss_dr9_best_neighbour, test))]
pub mod sdss_dr9_best_neighbour;
#[cfg(any(sdss_dr9_neighbourhood, test))]
pub mod sdss_dr9_neighbourhood;
#[cfg(any(sdssdr9_original_valid, test))]
pub mod sdssdr9_original_valid;
#[cfg(any(tgas_source, test))]
pub mod tgas_source;
#[cfg(any(tmass_best_neighbour, test))]
pub mod tmass_best_neighbour;
#[cfg(any(tmass_neighbourhood, test))]
pub mod tmass_neighbourhood;
#[cfg(any(tmass_original_valid, test))]
pub mod tmass_original_valid;
#[cfg(any(ucac4_best_neighbour, test))]
pub mod ucac4_best_neighbour;
#[cfg(any(ucac4_neighbourhood, test))]
pub mod ucac4_neighbourhood;
#[cfg(any(ucac4_original_valid, test))]
pub mod ucac4_original_valid;
#[cfg(any(urat1_best_neighbour, test))]
pub mod urat1_best_neighbour;
#[cfg(any(urat1_neighbourhood, test))]
pub mod urat1_neighbourhood;
#[cfg(any(urat1_original_valid, test))]
pub mod urat1_original_valid;
#[cfg(any(variable_summary, test))]
pub mod variable_summary;

#[cfg(test)]
pub(crate) fn collect_known(
    map: &mut std::collections::HashMap<String, std::collections::HashMap<String, Vec<String>>>,
) {
    let mut tables = std::collections::HashMap::new();
    aux_qso_icrf2_match::collect_known(&mut tables);
    ext_phot_zero_point::collect_known(&mut tables);
    allwise_best_neighbour::collect_known(&mut tables);
    allwise_neighbourhood::collect_known(&mut tables);
    gsc23_best_neighbour::collect_known(&mut tables);
    gsc23_neighbourhood::collect_known(&mut tables);
    ppmxl_best_neighbour::collect_known(&mut tables);
    ppmxl_neighbourhood::collect_known(&mut tables);
    sdss_dr9_best_neighbour::collect_known(&mut tables);
    sdss_dr9_neighbourhood::collect_known(&mut tables);
    tmass_best_neighbour::collect_known(&mut tables);
    tmass_neighbourhood::collect_known(&mut tables);
    ucac4_best_neighbour::collect_known(&mut tables);
    ucac4_neighbourhood::collect_known(&mut tables);
    urat1_best_neighbour::collect_known(&mut tables);
    urat1_neighbourhood::collect_known(&mut tables);
    cepheid::collect_known(&mut tables);
    phot_variable_time_series_gfov::collect_known(&mut tables);
    phot_variable_time_series_gfov_statistical_parameters::collect_known(&mut tables);
    rrlyrae::collect_known(&mut tables);
    variable_summary::collect_known(&mut tables);
    allwise_original_valid::collect_known(&mut tables);
    gsc23_original_valid::collect_known(&mut tables);
    ppmxl_original_valid::collect_known(&mut tables);
    sdssdr9_original_valid::collect_known(&mut tables);
    tmass_original_valid::collect_known(&mut tables);
    ucac4_original_valid::collect_known(&mut tables);
    urat1_original_valid::collect_known(&mut tables);
    gaia_source::collect_known(&mut tables);
    tgas_source::collect_known(&mut tables);
    map.insert(gaiadr1.string(), tables);
}
