// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::table::Table;

#[allow(non_camel_case_types)]
pub struct gaia_source_lite;

impl Table for gaia_source_lite {
    fn string(&self) -> String {
        "gaia_source_lite".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    source_id,
    random_index,
    ra,
    dec,
    parallax,
    parallax_error,
    parallax_over_error,
    pmra,
    pmra_error,
    pmdec,
    pmdec_error,
    astrometric_params_solved,
    pseudocolour,
    pseudocolour_error,
    ipd_frac_multi_peak,
    ipd_frac_odd_win,
    ruwe,
    phot_g_mean_flux_over_error,
    phot_g_mean_mag,
    phot_bp_mean_flux_over_error,
    phot_bp_mean_mag,
    phot_rp_mean_flux_over_error,
    phot_rp_mean_mag,
    phot_bp_rp_excess_factor,
    bp_rp,
    radial_velocity,
    radial_velocity_error,
    rv_nb_transits,
    rv_expected_sig_to_noise,
    rv_renormalised_gof,
    rv_chisq_pvalue,
    phot_variable_flag,
    l,
    b,
    in_qso_candidates,
    in_galaxy_candidates,
    non_single_star,
    has_xp_continuous,
    has_xp_sampled,
    has_rvs,
    has_epoch_photometry,
    has_epoch_rv,
    has_mcmc_gspphot,
    has_mcmc_msc,
    in_andromeda_survey,
    teff_gspphot,
    logg_gspphot,
    mh_gspphot,
    distance_gspphot,
    ag_gspphot,
    ebpminrp_gspphot,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::random_index.to_string());
    col_strings.push(Col::ra.to_string());
    col_strings.push(Col::dec.to_string());
    col_strings.push(Col::parallax.to_string());
    col_strings.push(Col::parallax_error.to_string());
    col_strings.push(Col::parallax_over_error.to_string());
    col_strings.push(Col::pmra.to_string());
    col_strings.push(Col::pmra_error.to_string());
    col_strings.push(Col::pmdec.to_string());
    col_strings.push(Col::pmdec_error.to_string());
    col_strings.push(Col::astrometric_params_solved.to_string());
    col_strings.push(Col::pseudocolour.to_string());
    col_strings.push(Col::pseudocolour_error.to_string());
    col_strings.push(Col::ipd_frac_multi_peak.to_string());
    col_strings.push(Col::ipd_frac_odd_win.to_string());
    col_strings.push(Col::ruwe.to_string());
    col_strings.push(Col::phot_g_mean_flux_over_error.to_string());
    col_strings.push(Col::phot_g_mean_mag.to_string());
    col_strings.push(Col::phot_bp_mean_flux_over_error.to_string());
    col_strings.push(Col::phot_bp_mean_mag.to_string());
    col_strings.push(Col::phot_rp_mean_flux_over_error.to_string());
    col_strings.push(Col::phot_rp_mean_mag.to_string());
    col_strings.push(Col::phot_bp_rp_excess_factor.to_string());
    col_strings.push(Col::bp_rp.to_string());
    col_strings.push(Col::radial_velocity.to_string());
    col_strings.push(Col::radial_velocity_error.to_string());
    col_strings.push(Col::rv_nb_transits.to_string());
    col_strings.push(Col::rv_expected_sig_to_noise.to_string());
    col_strings.push(Col::rv_renormalised_gof.to_string());
    col_strings.push(Col::rv_chisq_pvalue.to_string());
    col_strings.push(Col::phot_variable_flag.to_string());
    col_strings.push(Col::l.to_string());
    col_strings.push(Col::b.to_string());
    col_strings.push(Col::in_qso_candidates.to_string());
    col_strings.push(Col::in_galaxy_candidates.to_string());
    col_strings.push(Col::non_single_star.to_string());
    col_strings.push(Col::has_xp_continuous.to_string());
    col_strings.push(Col::has_xp_sampled.to_string());
    col_strings.push(Col::has_rvs.to_string());
    col_strings.push(Col::has_epoch_photometry.to_string());
    col_strings.push(Col::has_epoch_rv.to_string());
    col_strings.push(Col::has_mcmc_gspphot.to_string());
    col_strings.push(Col::has_mcmc_msc.to_string());
    col_strings.push(Col::in_andromeda_survey.to_string());
    col_strings.push(Col::teff_gspphot.to_string());
    col_strings.push(Col::logg_gspphot.to_string());
    col_strings.push(Col::mh_gspphot.to_string());
    col_strings.push(Col::distance_gspphot.to_string());
    col_strings.push(Col::ag_gspphot.to_string());
    col_strings.push(Col::ebpminrp_gspphot.to_string());
    map.insert(gaia_source_lite.string(), col_strings);
}
