// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::table::Table;

#[allow(non_camel_case_types)]
pub struct vari_planetary_transit;

impl Table for vari_planetary_transit {
    fn string(&self) -> String {
        "vari_planetary_transit".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    solution_id,
    source_id,
    transit_reference_time,
    transit_period,
    transit_depth,
    transit_duration,
    num_in_transit,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::transit_reference_time.to_string());
    col_strings.push(Col::transit_period.to_string());
    col_strings.push(Col::transit_depth.to_string());
    col_strings.push(Col::transit_duration.to_string());
    col_strings.push(Col::num_in_transit.to_string());
    map.insert(vari_planetary_transit.string(), col_strings);
}
