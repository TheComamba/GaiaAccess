// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::table::Table;

#[allow(non_camel_case_types)]
pub struct vari_spurious_signals;

impl Table for vari_spurious_signals {
    fn string(&self) -> String {
        "vari_spurious_signals".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    source_id,
    phot_variable_flag,
    in_andromeda_survey,
    num_obs_common_all_bands,
    num_obs_g_fov,
    gls_freq_g_fov,
    gls_freq_ampl_g_fov,
    gls_freq_sde_g_fov,
    gls_freq_fap_g_fov,
    nhm_fund_freq_g_fov,
    nhm_fund_freq_error_g_fov,
    spearman_corr_exf_g_fov,
    num_obs_excl_epsl_g_fov,
    spearman_corr_ipd_g_fov,
    scan_angle_model_offset_g_fov,
    scan_angle_model_ampl_g_fov,
    scan_angle_model_ampl_sig_g_fov,
    scan_angle_model_phase_g_fov,
    scan_angle_model_red_chi2_g_fov,
    scan_angle_model_f2_g_fov,
    spearman_corr_exf_bp,
    num_obs_excl_epsl_bp,
    spearman_corr_ipd_bp,
    scan_angle_model_offset_bp,
    scan_angle_model_ampl_bp,
    scan_angle_model_ampl_sig_bp,
    scan_angle_model_phase_bp,
    scan_angle_model_red_chi2_bp,
    scan_angle_model_f2_bp,
    spearman_corr_exf_rp,
    num_obs_excl_epsl_rp,
    spearman_corr_ipd_rp,
    scan_angle_model_offset_rp,
    scan_angle_model_ampl_rp,
    scan_angle_model_ampl_sig_rp,
    scan_angle_model_phase_rp,
    scan_angle_model_red_chi2_rp,
    scan_angle_model_f2_rp,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::phot_variable_flag.to_string());
    col_strings.push(Col::in_andromeda_survey.to_string());
    col_strings.push(Col::num_obs_common_all_bands.to_string());
    col_strings.push(Col::num_obs_g_fov.to_string());
    col_strings.push(Col::gls_freq_g_fov.to_string());
    col_strings.push(Col::gls_freq_ampl_g_fov.to_string());
    col_strings.push(Col::gls_freq_sde_g_fov.to_string());
    col_strings.push(Col::gls_freq_fap_g_fov.to_string());
    col_strings.push(Col::nhm_fund_freq_g_fov.to_string());
    col_strings.push(Col::nhm_fund_freq_error_g_fov.to_string());
    col_strings.push(Col::spearman_corr_exf_g_fov.to_string());
    col_strings.push(Col::num_obs_excl_epsl_g_fov.to_string());
    col_strings.push(Col::spearman_corr_ipd_g_fov.to_string());
    col_strings.push(Col::scan_angle_model_offset_g_fov.to_string());
    col_strings.push(Col::scan_angle_model_ampl_g_fov.to_string());
    col_strings.push(Col::scan_angle_model_ampl_sig_g_fov.to_string());
    col_strings.push(Col::scan_angle_model_phase_g_fov.to_string());
    col_strings.push(Col::scan_angle_model_red_chi2_g_fov.to_string());
    col_strings.push(Col::scan_angle_model_f2_g_fov.to_string());
    col_strings.push(Col::spearman_corr_exf_bp.to_string());
    col_strings.push(Col::num_obs_excl_epsl_bp.to_string());
    col_strings.push(Col::spearman_corr_ipd_bp.to_string());
    col_strings.push(Col::scan_angle_model_offset_bp.to_string());
    col_strings.push(Col::scan_angle_model_ampl_bp.to_string());
    col_strings.push(Col::scan_angle_model_ampl_sig_bp.to_string());
    col_strings.push(Col::scan_angle_model_phase_bp.to_string());
    col_strings.push(Col::scan_angle_model_red_chi2_bp.to_string());
    col_strings.push(Col::scan_angle_model_f2_bp.to_string());
    col_strings.push(Col::spearman_corr_exf_rp.to_string());
    col_strings.push(Col::num_obs_excl_epsl_rp.to_string());
    col_strings.push(Col::spearman_corr_ipd_rp.to_string());
    col_strings.push(Col::scan_angle_model_offset_rp.to_string());
    col_strings.push(Col::scan_angle_model_ampl_rp.to_string());
    col_strings.push(Col::scan_angle_model_ampl_sig_rp.to_string());
    col_strings.push(Col::scan_angle_model_phase_rp.to_string());
    col_strings.push(Col::scan_angle_model_red_chi2_rp.to_string());
    col_strings.push(Col::scan_angle_model_f2_rp.to_string());
    map.insert(vari_spurious_signals.string(), col_strings);
}
