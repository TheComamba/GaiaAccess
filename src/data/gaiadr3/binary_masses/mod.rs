// This code is generated by generate_code.py, do not modify it manually.
use crate::traits::{Column, Table};

#[allow(non_camel_case_types)]
pub struct binary_masses;

impl Table for binary_masses {
    fn string(&self) -> String {
        "binary_masses".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    source_id,
    m1,
    m1_lower,
    m1_upper,
    m2,
    m2_lower,
    m2_upper,
    fluxratio,
    fluxratio_lower,
    fluxratio_upper,
    combination_method,
    m1_ref,
    flag,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::m1.to_string());
    col_strings.push(Col::m1_lower.to_string());
    col_strings.push(Col::m1_upper.to_string());
    col_strings.push(Col::m2.to_string());
    col_strings.push(Col::m2_lower.to_string());
    col_strings.push(Col::m2_upper.to_string());
    col_strings.push(Col::fluxratio.to_string());
    col_strings.push(Col::fluxratio_lower.to_string());
    col_strings.push(Col::fluxratio_upper.to_string());
    col_strings.push(Col::combination_method.to_string());
    col_strings.push(Col::m1_ref.to_string());
    col_strings.push(Col::flag.to_string());
    map.insert(binary_masses.string(), col_strings);
}
