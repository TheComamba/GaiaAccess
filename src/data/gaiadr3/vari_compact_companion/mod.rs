// This code is generated by generate_code.py, do not modify it manually.
use crate::traits::{Column, Table};

#[allow(non_camel_case_types)]
pub struct vari_compact_companion;

impl Table for vari_compact_companion {
    fn string(&self) -> String {
        "vari_compact_companion".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    solution_id,
    source_id,
    period,
    period_error,
    t0_g,
    t0_g_error,
    t0_bp,
    t0_bp_error,
    t0_rp,
    t0_rp_error,
    harmonic_model_params_g,
    harmonic_model_params_g_error,
    harmonic_model_params_bp,
    harmonic_model_params_bp_error,
    harmonic_model_params_rp,
    harmonic_model_params_rp_error,
    model_mean_g,
    model_mean_g_error,
    model_mean_bp,
    model_mean_bp_error,
    model_mean_rp,
    model_mean_rp_error,
    mod_min_mass_ratio,
    mod_min_mass_ratio_one_sigma,
    mod_min_mass_ratio_three_sigma,
    alpha,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::period.to_string());
    col_strings.push(Col::period_error.to_string());
    col_strings.push(Col::t0_g.to_string());
    col_strings.push(Col::t0_g_error.to_string());
    col_strings.push(Col::t0_bp.to_string());
    col_strings.push(Col::t0_bp_error.to_string());
    col_strings.push(Col::t0_rp.to_string());
    col_strings.push(Col::t0_rp_error.to_string());
    col_strings.push(Col::harmonic_model_params_g.to_string());
    col_strings.push(Col::harmonic_model_params_g_error.to_string());
    col_strings.push(Col::harmonic_model_params_bp.to_string());
    col_strings.push(Col::harmonic_model_params_bp_error.to_string());
    col_strings.push(Col::harmonic_model_params_rp.to_string());
    col_strings.push(Col::harmonic_model_params_rp_error.to_string());
    col_strings.push(Col::model_mean_g.to_string());
    col_strings.push(Col::model_mean_g_error.to_string());
    col_strings.push(Col::model_mean_bp.to_string());
    col_strings.push(Col::model_mean_bp_error.to_string());
    col_strings.push(Col::model_mean_rp.to_string());
    col_strings.push(Col::model_mean_rp_error.to_string());
    col_strings.push(Col::mod_min_mass_ratio.to_string());
    col_strings.push(Col::mod_min_mass_ratio_one_sigma.to_string());
    col_strings.push(Col::mod_min_mass_ratio_three_sigma.to_string());
    col_strings.push(Col::alpha.to_string());
    map.insert(vari_compact_companion.string(), col_strings);
}
