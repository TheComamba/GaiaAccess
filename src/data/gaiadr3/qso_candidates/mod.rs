// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::table::Table;

#[allow(non_camel_case_types)]
pub struct qso_candidates;

impl Table for qso_candidates {
    fn string(&self) -> String {
        "qso_candidates".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    solution_id,
    source_id,
    astrometric_selection_flag,
    gaia_crf_source,
    vari_best_class_name,
    vari_best_class_score,
    fractional_variability_g,
    structure_function_index,
    structure_function_index_scatter,
    qso_variability,
    non_qso_variability,
    vari_agn_membership_score,
    classprob_dsc_combmod_quasar,
    classprob_dsc_combmod_galaxy,
    classlabel_dsc,
    classlabel_dsc_joint,
    classlabel_oa,
    redshift_qsoc,
    redshift_qsoc_lower,
    redshift_qsoc_upper,
    ccfratio_qsoc,
    zscore_qsoc,
    flags_qsoc,
    n_transits,
    intensity_quasar,
    intensity_quasar_error,
    intensity_hostgalaxy,
    intensity_hostgalaxy_error,
    radius_hostgalaxy,
    radius_hostgalaxy_error,
    sersic_index,
    sersic_index_error,
    ellipticity_hostgalaxy,
    ellipticity_hostgalaxy_error,
    posangle_hostgalaxy,
    posangle_hostgalaxy_error,
    host_galaxy_detected,
    l2_norm,
    morph_params_corr_vec,
    host_galaxy_flag,
    source_selection_flags,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::astrometric_selection_flag.to_string());
    col_strings.push(Col::gaia_crf_source.to_string());
    col_strings.push(Col::vari_best_class_name.to_string());
    col_strings.push(Col::vari_best_class_score.to_string());
    col_strings.push(Col::fractional_variability_g.to_string());
    col_strings.push(Col::structure_function_index.to_string());
    col_strings.push(Col::structure_function_index_scatter.to_string());
    col_strings.push(Col::qso_variability.to_string());
    col_strings.push(Col::non_qso_variability.to_string());
    col_strings.push(Col::vari_agn_membership_score.to_string());
    col_strings.push(Col::classprob_dsc_combmod_quasar.to_string());
    col_strings.push(Col::classprob_dsc_combmod_galaxy.to_string());
    col_strings.push(Col::classlabel_dsc.to_string());
    col_strings.push(Col::classlabel_dsc_joint.to_string());
    col_strings.push(Col::classlabel_oa.to_string());
    col_strings.push(Col::redshift_qsoc.to_string());
    col_strings.push(Col::redshift_qsoc_lower.to_string());
    col_strings.push(Col::redshift_qsoc_upper.to_string());
    col_strings.push(Col::ccfratio_qsoc.to_string());
    col_strings.push(Col::zscore_qsoc.to_string());
    col_strings.push(Col::flags_qsoc.to_string());
    col_strings.push(Col::n_transits.to_string());
    col_strings.push(Col::intensity_quasar.to_string());
    col_strings.push(Col::intensity_quasar_error.to_string());
    col_strings.push(Col::intensity_hostgalaxy.to_string());
    col_strings.push(Col::intensity_hostgalaxy_error.to_string());
    col_strings.push(Col::radius_hostgalaxy.to_string());
    col_strings.push(Col::radius_hostgalaxy_error.to_string());
    col_strings.push(Col::sersic_index.to_string());
    col_strings.push(Col::sersic_index_error.to_string());
    col_strings.push(Col::ellipticity_hostgalaxy.to_string());
    col_strings.push(Col::ellipticity_hostgalaxy_error.to_string());
    col_strings.push(Col::posangle_hostgalaxy.to_string());
    col_strings.push(Col::posangle_hostgalaxy_error.to_string());
    col_strings.push(Col::host_galaxy_detected.to_string());
    col_strings.push(Col::l2_norm.to_string());
    col_strings.push(Col::morph_params_corr_vec.to_string());
    col_strings.push(Col::host_galaxy_flag.to_string());
    col_strings.push(Col::source_selection_flags.to_string());
    map.insert(qso_candidates.string(), col_strings);
}
