// This code is generated by generate_code.py, do not modify it manually
use crate::column::Column;
use crate::table::Table;

#[allow(non_camel_case_types)]
pub struct chemical_cartography;

impl Table for chemical_cartography {
    fn string(&self) -> String {
        "chemical_cartography".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    solution_id,
    source_id,
    jr_med,
    jz_med,
    jphi_med,
    rplane_med,
    vrplane_med,
    vz_med,
    vphi_med,
    zmax_med,
    rapo_med,
    rperi_med,
    ecc_med,
    x_med,
    y_med,
    z_med,
    energy_med,
    jr_hi,
    jz_hi,
    jphi_hi,
    rplane_hi,
    vrplane_hi,
    vz_hi,
    vphi_hi,
    zmax_hi,
    rapo_hi,
    rperi_hi,
    ecc_hi,
    x_hi,
    y_hi,
    z_hi,
    jr_lo,
    jz_lo,
    jphi_lo,
    rplane_lo,
    vrplane_lo,
    vz_lo,
    vphi_lo,
    zmax_lo,
    rapo_lo,
    rperi_lo,
    ecc_lo,
    x_lo,
    y_lo,
    z_lo,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::jr_med.to_string());
    col_strings.push(Col::jz_med.to_string());
    col_strings.push(Col::jphi_med.to_string());
    col_strings.push(Col::rplane_med.to_string());
    col_strings.push(Col::vrplane_med.to_string());
    col_strings.push(Col::vz_med.to_string());
    col_strings.push(Col::vphi_med.to_string());
    col_strings.push(Col::zmax_med.to_string());
    col_strings.push(Col::rapo_med.to_string());
    col_strings.push(Col::rperi_med.to_string());
    col_strings.push(Col::ecc_med.to_string());
    col_strings.push(Col::x_med.to_string());
    col_strings.push(Col::y_med.to_string());
    col_strings.push(Col::z_med.to_string());
    col_strings.push(Col::energy_med.to_string());
    col_strings.push(Col::jr_hi.to_string());
    col_strings.push(Col::jz_hi.to_string());
    col_strings.push(Col::jphi_hi.to_string());
    col_strings.push(Col::rplane_hi.to_string());
    col_strings.push(Col::vrplane_hi.to_string());
    col_strings.push(Col::vz_hi.to_string());
    col_strings.push(Col::vphi_hi.to_string());
    col_strings.push(Col::zmax_hi.to_string());
    col_strings.push(Col::rapo_hi.to_string());
    col_strings.push(Col::rperi_hi.to_string());
    col_strings.push(Col::ecc_hi.to_string());
    col_strings.push(Col::x_hi.to_string());
    col_strings.push(Col::y_hi.to_string());
    col_strings.push(Col::z_hi.to_string());
    col_strings.push(Col::jr_lo.to_string());
    col_strings.push(Col::jz_lo.to_string());
    col_strings.push(Col::jphi_lo.to_string());
    col_strings.push(Col::rplane_lo.to_string());
    col_strings.push(Col::vrplane_lo.to_string());
    col_strings.push(Col::vz_lo.to_string());
    col_strings.push(Col::vphi_lo.to_string());
    col_strings.push(Col::zmax_lo.to_string());
    col_strings.push(Col::rapo_lo.to_string());
    col_strings.push(Col::rperi_lo.to_string());
    col_strings.push(Col::ecc_lo.to_string());
    col_strings.push(Col::x_lo.to_string());
    col_strings.push(Col::y_lo.to_string());
    col_strings.push(Col::z_lo.to_string());
    map.insert(chemical_cartography.string(), col_strings);
}
