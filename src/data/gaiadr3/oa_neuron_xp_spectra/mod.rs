// This code is generated by generate_code.py, do not modify it manually
use crate::traits::{Column, Table};

#[allow(non_camel_case_types)]
pub struct oa_neuron_xp_spectra;

impl Table for oa_neuron_xp_spectra {
    fn string(&self) -> String {
        "oa_neuron_xp_spectra".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    solution_id,
    neuron_id,
    neuron_row_index,
    neuron_column_index,
    xp_spectrum_prototype_flux,
    xp_spectrum_prototype_wavelength,
    xp_spectrum_template_flux,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::neuron_id.to_string());
    col_strings.push(Col::neuron_row_index.to_string());
    col_strings.push(Col::neuron_column_index.to_string());
    col_strings.push(Col::xp_spectrum_prototype_flux.to_string());
    col_strings.push(Col::xp_spectrum_prototype_wavelength.to_string());
    col_strings.push(Col::xp_spectrum_template_flux.to_string());
    map.insert(oa_neuron_xp_spectra.string(), col_strings);
}
