// This code is generated by generate_code.py, do not modify it manually
use crate::traits::{Column, Table};

#[allow(non_camel_case_types)]
pub struct xp_summary;

impl Table for xp_summary {
    fn string(&self) -> String {
        "xp_summary".to_string()
    }
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    source_id,
    solution_id,
    bp_n_relevant_bases,
    bp_relative_shrinking,
    bp_n_measurements,
    bp_n_rejected_measurements,
    bp_standard_deviation,
    bp_chi_squared,
    bp_n_transits,
    bp_n_contaminated_transits,
    bp_n_blended_transits,
    rp_n_relevant_bases,
    rp_relative_shrinking,
    rp_n_measurements,
    rp_n_rejected_measurements,
    rp_standard_deviation,
    rp_chi_squared,
    rp_n_transits,
    rp_n_contaminated_transits,
    rp_n_blended_transits,
}

impl Column for Col {}

#[cfg(test)]
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::bp_n_relevant_bases.to_string());
    col_strings.push(Col::bp_relative_shrinking.to_string());
    col_strings.push(Col::bp_n_measurements.to_string());
    col_strings.push(Col::bp_n_rejected_measurements.to_string());
    col_strings.push(Col::bp_standard_deviation.to_string());
    col_strings.push(Col::bp_chi_squared.to_string());
    col_strings.push(Col::bp_n_transits.to_string());
    col_strings.push(Col::bp_n_contaminated_transits.to_string());
    col_strings.push(Col::bp_n_blended_transits.to_string());
    col_strings.push(Col::rp_n_relevant_bases.to_string());
    col_strings.push(Col::rp_relative_shrinking.to_string());
    col_strings.push(Col::rp_n_measurements.to_string());
    col_strings.push(Col::rp_n_rejected_measurements.to_string());
    col_strings.push(Col::rp_standard_deviation.to_string());
    col_strings.push(Col::rp_chi_squared.to_string());
    col_strings.push(Col::rp_n_transits.to_string());
    col_strings.push(Col::rp_n_contaminated_transits.to_string());
    col_strings.push(Col::rp_n_blended_transits.to_string());
    map.insert(xp_summary.string(), col_strings);
}
